#if !canImport(ObjectiveC)
import XCTest

extension ChainTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ChainTests = [
        ("testArrayChain2", testArrayChain2),
        ("testArrayChain3", testArrayChain3),
        ("testArrayChain4", testArrayChain4),
        ("testArrayChain5", testArrayChain5),
        ("testArrayChain6", testArrayChain6),
        ("testOptionalChain2", testOptionalChain2),
        ("testOptionalChain3", testOptionalChain3),
        ("testOptionalChain4", testOptionalChain4),
        ("testOptionalChain5", testOptionalChain5),
        ("testOptionalChain6", testOptionalChain6),
        ("testThrowingArrayChain2", testThrowingArrayChain2),
        ("testThrowingArrayChain3", testThrowingArrayChain3),
        ("testThrowingArrayChain4", testThrowingArrayChain4),
        ("testThrowingArrayChain5", testThrowingArrayChain5),
        ("testThrowingArrayChain6", testThrowingArrayChain6),
        ("testThrowingOptionalChain2", testThrowingOptionalChain2),
        ("testThrowingOptionalChain3", testThrowingOptionalChain3),
        ("testThrowingOptionalChain4", testThrowingOptionalChain4),
        ("testThrowingOptionalChain5", testThrowingOptionalChain5),
        ("testThrowingOptionalChain6", testThrowingOptionalChain6),
    ]
}

extension ComposeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ComposeTests = [
        ("testCompose2", testCompose2),
        ("testCompose3", testCompose3),
        ("testCompose4", testCompose4),
        ("testCompose5", testCompose5),
        ("testCompose6", testCompose6),
        ("testThrowingCompose2", testThrowingCompose2),
        ("testThrowingCompose3", testThrowingCompose3),
        ("testThrowingCompose4", testThrowingCompose4),
        ("testThrowingCompose5", testThrowingCompose5),
        ("testThrowingCompose6", testThrowingCompose6),
    ]
}

extension ConcatTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConcatTests = [
        ("testConcat", testConcat),
        ("testInoutConcat", testInoutConcat),
        ("testThrowingConcat", testThrowingConcat),
        ("testThrowingInoutConcat", testThrowingInoutConcat),
    ]
}

extension CurryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CurryTests = [
        ("testCurry", testCurry),
        ("testThrowing", testThrowing),
    ]
}

extension FlipTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FlipTests = [
        ("testFlip", testFlip),
    ]
}

extension KeyPathTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__KeyPathTests = [
        ("testAnyObjectAnyObjectMprop", testAnyObjectAnyObjectMprop),
        ("testAnyObjectAnyObjectMver", testAnyObjectAnyObjectMver),
        ("testAnyObjectInoutMprop", testAnyObjectInoutMprop),
        ("testAnyObjectInoutMver", testAnyObjectInoutMver),
        ("testAnyObjectMut", testAnyObjectMut),
        ("testGet", testGet),
        ("testInoutMprop", testInoutMprop),
        ("testInoutMut", testInoutMut),
        ("testInoutMver", testInoutMver),
        ("testOver", testOver),
        ("testProp", testProp),
        ("testSet", testSet),
    ]
}

extension PipeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PipeTests = [
        ("testPipe2", testPipe2),
        ("testPipe3", testPipe3),
        ("testPipe4", testPipe4),
        ("testPipe5", testPipe5),
        ("testPipe6", testPipe6),
        ("testThrowingPipe2", testThrowingPipe2),
        ("testThrowingPipe3", testThrowingPipe3),
        ("testThrowingPipe4", testThrowingPipe4),
        ("testThrowingPipe5", testThrowingPipe5),
        ("testThrowingPipe6", testThrowingPipe6),
    ]
}

extension SettersTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SettersTests = [
        ("testAnyObjectAnyObjectMver", testAnyObjectAnyObjectMver),
        ("testAnyObjectInoutMver", testAnyObjectInoutMver),
        ("testAnyObjectMut", testAnyObjectMut),
        ("testInoutMut", testInoutMut),
        ("testInoutMver", testInoutMver),
        ("testOver", testOver),
        ("testSet", testSet),
    ]
}

extension UncurryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UncurryTests = [
        ("testThrowing", testThrowing),
        ("testUncurry", testUncurry),
    ]
}

extension WithTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__WithTests = [
        ("testAmbiguity", testAmbiguity),
        ("testInPlaceWith", testInPlaceWith),
        ("testReferenceMutableWith", testReferenceMutableWith),
        ("testValueCopyableWith", testValueCopyableWith),
        ("testWith", testWith),
    ]
}

extension ZipTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ZipTests = [
        ("testZip10WithSequence", testZip10WithSequence),
        ("testZip2WithSequence", testZip2WithSequence),
        ("testZip3WithSequence", testZip3WithSequence),
        ("testZip4WithSequence", testZip4WithSequence),
        ("testZip5WithSequence", testZip5WithSequence),
        ("testZip6WithSequence", testZip6WithSequence),
        ("testZip7WithSequence", testZip7WithSequence),
        ("testZip8WithSequence", testZip8WithSequence),
        ("testZip9WithSequence", testZip9WithSequence),
        ("testZipOptional", testZipOptional),
        ("testZipResult", testZipResult),
        ("testZipSequence", testZipSequence),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ChainTests.__allTests__ChainTests),
        testCase(ComposeTests.__allTests__ComposeTests),
        testCase(ConcatTests.__allTests__ConcatTests),
        testCase(CurryTests.__allTests__CurryTests),
        testCase(FlipTests.__allTests__FlipTests),
        testCase(KeyPathTests.__allTests__KeyPathTests),
        testCase(PipeTests.__allTests__PipeTests),
        testCase(SettersTests.__allTests__SettersTests),
        testCase(UncurryTests.__allTests__UncurryTests),
        testCase(WithTests.__allTests__WithTests),
        testCase(ZipTests.__allTests__ZipTests),
    ]
}
#endif
